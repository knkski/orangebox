#!/bin/bash

set -eux

# If user is not root then exit
if [ "$(id -u)" != "0" ]; then
  echo "Must be run with sudo or by root"
  exit 77
fi

# Install a few utils used in the script to set up networking
dpkg -i ./*.deb

ob_number=28

setup_networking() {
  # Configure systemd-resolved to use google's DNS
  sed -i 's/^#DNS=$/DNS=8.8.8.8 8.8.4.4/g' /etc/systemd/resolved.conf
  sudo systemctl restart systemd-resolved

  # Get Orangebox number from the hostname and place into the configuration file
  obnum=28
  echo "orangebox_number=${obnum}" > /etc/orange-box.conf

  # Get interface names of the 3 interfaces on node0 since in Xenial they aren't ethX anymore
  # An array is declared and the interface names are placed into the array to be used later on
  declare interface=()

  for inter_face in $(ip a | awk '{print $2}'|egrep 'enp|enx'|sed 's/://')
  do
     echo "Interface read $inter_face"
     interface=("${interface[@]}" "$inter_face")
  done
  echo "Interfaces assigned "${interface[@]}""

  #Add kernel parameters for networking with MAAS to function correctly
  echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
  echo "net.ipv4.conf.all.accept_redirects = 1" >> /etc/sysctl.conf

  # Assign variables with the values for the network setup and execute the check_orangebox_number
  . /etc/orange-box.conf

  internal1_ip="172.27.$((orangebox_number)).1"
  gateway1_ip=172.27.$((orangebox_number+1)).254
  internal2_ip=172.27.$((orangebox_number+2)).1
  gateway2_ip=172.27.$((orangebox_number+3)).254
  gateway_ip=$gateway1_ip

  # Set up the nic variables
  internal0_if="${interface[0]}"
  internal1_if="${interface[1]}"
  internal2_if="${interface[2]}"

  ip addr flush dev ${internal1_if}
  ifconfig ${internal1_if} ${internal1_ip}/23
  internal1_if="${interface[2]}"
  internal2_if="${interface[1]}"

  # Disable NetworkManager 
  systemctl stop NetworkManager
  systemctl disable NetworkManager

  # gen network configuration /etc/network/interfaces
  cat >/etc/network/interfaces <<-EOF
#These are generated by orange-box build scripts
auto lo
iface lo inet loopback

auto $internal0_if
iface $internal0_if inet manual

auto $internal1_if
iface $internal1_if inet manual

auto $internal2_if
iface $internal2_if inet manual

auto br0
iface br0 inet static
  address ${internal1_ip}
  netmask 255.255.254.0
  gateway ${gateway_ip}
  dns-nameservers ${internal1_ip} ${gateway_ip}
  bridge_ports $internal1_if
  bridge_stp off
  bridge_fd 0
  bridge_maxwait 0

auto br1
iface br1 inet static
  address ${internal2_ip}
  netmask 255.255.254.0
  bridge_ports $internal2_if
  bridge_stp off
  bridge_fd 0
  bridge_maxwait 0
EOF

  # Take down all of the interfaces
  ifdown --force $internal0_if || true
  ifdown --force $internal1_if || true
  ifdown --force $internal2_if || true

  # Take down br interfaces
  ifdown --force br0 || true
  ifdown --force br1 || true

  # Bring up br0, br1
  ifup $internal1_if --force
  ifup $internal2_if --force
  ifup br0 --force
  ifup br1 --force

  echo "Waiting for network to come up"
  until ping -c1 8.8.8.8 >/dev/null 2>&1; do :; done

  echo "Waiting for DNS to come up"
  until ping -c1 google.com >/dev/null 2>&1; do :; done
}

setup_ssh() {
  [ ! -f /home/ubuntu/.ssh/id_rsa ] && sudo -u ubuntu ssh-keygen -t rsa -N '' -f /home/ubuntu/.ssh/id_rsa
  apt install -y openssh-server
  sudo -u ubuntu ssh-import-id lp:knkski
}

setup_maas() {
  sub_net="172.27.28.0/23"

  # For parsing command output
  snap install jq

  # Install postgresql for maas db
  apt install -y postgresql
  sudo -u postgres psql -c "CREATE USER maas WITH PASSWORD 'foobar';"
  sudo -u postgres createdb -O maas maasdb

  snap install maas
  maas init \
    --mode region+rack \
    --maas-url http://${internal1_ip}:5240/MAAS \
    --admin-username admin \
    --admin-password admin \
    --admin-email admin@example.com \
    --admin-ssh-import lp:knkski \
    --database-host localhost \
    --database-name maasdb \
    --database-user maas \
    --database-pass foobar \
    --database-port 5432

  maas createadmin \
    --username admin \
    --password admin \
    --email admin@example.com \
    --ssh-import lp:knkski

  maas apikey --user admin
  maas login admin http://${internal1_ip}:5240/MAAS $(sudo maas apikey --username admin)
  maas admin sshkeys create key="$(< /home/ubuntu/.ssh/id_rsa.pub)"


  maas admin ipranges create type=dynamic start_ip=172.27.29.1 end_ip=172.27.29.20
  system_id=$(maas admin rack-controllers read | jq -rc .[0].system_id)
  maas admin subnets read | jq -rc ".[] | select(.cidr == \"${sub_net}\") | .vlan.fabric" | while read fabric
  do
    maas admin vlan update ${fabric} untagged dhcp_on=True primary_rack=${system_id}
  done

  maas admin maas set-config name=upstream_dns value=172.27.29.254
  maas admin maas set-config name=dnssec_validation value=no
  maas admin maas set-config name=kernel_opts value="net.ifnames=0"

  # Sync images from maas.io, and wait for them to download. If we try to create a machine without the
  # images synced, we get a weird error about amd64/generic not being a supported architecture.
  maas admin boot-source-selections create 1 os="ubuntu" release="bionic" arches="amd64" subarches="*" labels="*" || true
  maas admin boot-source-selections create 1 os="ubuntu" release="focal" arches="amd64" subarches="*" labels="*" || true
  maas admin boot-resources import
  while [ "$(sudo maas admin boot-resources is-importing | tail -n+1)" = "true" ]
  do
    echo "Waiting for images to sync..."
  done

  maas admin zone read zone1 || maas admin zones create name=zone1 description="Physical machines 1-5"
  maas admin zone read zone2 || maas admin zones create name=zone2 description="Physical machines 6-10"
}

setup_maas_nodes() {
  sub_net="172.27.30.0/23"

  # Add tags to MAAS if not already there
  maas admin tags create name=physical || true
  maas admin tags create name=use-fastpath-installer || true

  for amtnum in {11..20}
  do
    ping -c 2 172.27.${ob_number}.${amtnum} || {
      echo "Couldn't contact AMT #${amtnum}"
      continue
    }

    # Get mac address for the corresponding amt ip address
    mac=`arp -n | grep 172.27.${ob_number}.$amtnum |awk '{print $3}'`
    echo "$mac belongs to node${amtnum}ob${ob_number} with ip 172.27.${ob_number}.${amtnum}"

    # Get the node number for the name out of the amt ip address
    nodenum=`expr ${amtnum} - 10`
    if [ ${nodenum} -lt 10 ]; then
      nodenum="0${nodenum}"
    fi
    echo "The name of the node is node${nodenum}ob${ob_number}"

    # Add each node to MAAS and commission it
    maas admin machines create \
      architecture=amd64 \
      power_type=amt \
      power_parameters_power_address=172.27.${ob_number}.${amtnum} \
      power_parameters_power_pass=Password1+ \
      mac_addresses=${mac} \
      hostname=node${nodenum}ob${ob_number}

    # Get the system id of each node
    system_id=$(maas admin nodes read mac_address=$mac | jq -r .[].system_id)
    echo $system_id

    # Assign tags to each node
    maas admin tag update-nodes "physical" add=$system_id
    maas admin tag update-nodes "use-fastpath-installer" add=$system_id

    # Determine which zone a node will be in
    if [ ${nodenum} -lt 6 ]; then
      zone="zone1"
    else
      zone="zone2"
    fi
    echo "Node node${nodenum}ob${ob_number} is in $zone"

    # Add the nodes to their respective zone
    maas admin nodes set-zone zone=$zone nodes=$system_id
  done


  # for nodenum in {01..10}
  # do
  #   maas admin subnets read | jq -rc ".[] | select(.cidr == \"${sub_net}\") | .vlan.id" | while read vlanid
  #   do
  #     interface=$(maas admin nodes read hostname=node${nodenum}ob28 | grep enx | cut -d '"' -f4)
  #     system_id=$(maas admin nodes read hostname=node${nodenum}ob28 | jq -r .[].system_id)
  #
  #     if [[ -n ${interface} ]]; then
  #       maas admin interface update $system_id $interface name=eth1
  #       maas admin interface update $system_id eth1 vlan=$vlanid
  #       maas admin interface link-subnet $system_id eth1 mode=auto subnet="$sub_net"
  #     else
  #       eth1_set=$(maas admin interface read $system_id eth1|grep cidr 1>/dev/null 2>&1; echo $?) #0=already set, 1=needs setting
  #       if [[ ${eth1_set} -eq 1 ]]; then
  #         maas admin interface update $system_id eth1 vlan=$vlanid
  #         maas admin interface link-subnet $system_id eth1 mode=auto subnet="$sub_net"
  #       fi
  #     fi
  #   done
  # done
}

setup_networking
setup_ssh
setup_maas
setup_maas_nodes
exit 0
